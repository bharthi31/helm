{{- if .Values.standaloneCIC }}
{{- if .Values.openshift }}
apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
{{- else }}
apiVersion: apps/v1
kind: Deployment
{{- end}}
metadata:
  name: cic-k8s-ingress-controller
spec:
  selector:
{{- if .Values.openshift }}
     router: cic-k8s-ingress-controller
{{- else }}
    matchLabels:
      app: cic-k8s-ingress-controller
{{- end}}
  replicas: 1
{{- if .Values.openshift }}
  strategy:
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 0
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
{{- end}}
  template:
    metadata:
      name: cic-k8s-ingress-controller
      labels:
{{- if .Values.openshift }}
        router: cic-k8s-ingress-controller
{{- else }}
        app: cic-k8s-ingress-controller
{{- end}}
    spec:
      serviceAccountName: cic-k8s-role
      containers:
      - name: cic-k8s-ingress-controller
        image: "{{ .Values.cic.image }}"
        imagePullPolicy: {{ .Values.cic.pullPolicy }}
        args:
          - --default-ssl-certificate
            {{ .Values.defaultSSLCert | default "{{ .Release.Namespace }}/default-cert" }}
{{- if .Values.ingressClass }}
          - --ingress-class
{{- range .Values.ingressClass}}
            {{.}}
{{- end }}
{{- end }}
          - --feature-node-watch
            {{.Values.nodeWatch}}
        env:
        - name: "NS_IP"
          value: "{{ .Values.nsIP }}"
{{- if .Values.nsVIP }}
        - name: "NS_VIP"
          value: "{{ .Values.nsVIP }}"
{{- end}}
        - name: "NS_USER"
          valueFrom:
            secretKeyRef:
              name: {{ .Values.loginFileName | default "nslogin"}}
              key: username
        - name: "NS_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: {{ .Values.loginFileName | default "nslogin"}}
              key: password
        - name: "EULA"
          value: "{{ .Values.license.accept }}"
        - name: "LOGLEVEL"
          value: "{{ .Values.logLevel}}"
        - name: "NS_PROTOCOL"
          value: "{{ .Values.nsProtocol }}"
        - name: "NS_PORT"
          value: "{{ .Values.nsPort}}"
        - name: "NS_APPS_NAME_PREFIX"
          value: {{ .Values.nsNamespace | default "k8s"}}
{{- if .Values.kubernetesURL }}
        - name: "kubernetes_url"
          value: "{{ .Values.kubernetesURL }}"
{{- end}}
{{- if .Values.exporter.required }}
      - name: exporter
        image: "{{ .Values.exporter.image }}"
        args:
          - "--secure=YES"
          - "--username=$(NS_USERNAME)"
          - "--password=$(NS_PASSWORD)"
          - "--target-nsip={{ .Values.nsIP }}"
          - "--port={{ .Values.exporter.ports.containerPort }}"
        env:
          - name: NS_USERNAME
            valueFrom:
              secretKeyRef:
                name: {{ .Values.loginFileName | default "nslogin"}}
                key: username
          - name: NS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.loginFileName | default "nslogin"}}
                key: password
        imagePullPolicy: {{ .Values.exporter.pullPolicy }}
{{- end }}
---

{{- if .Values.exporter.required }}


apiVersion: v1
kind: Service
metadata:
   name: exporter
   labels:
     app: exporter
     service-type: citrix-adc-monitor
spec:
   type: ClusterIP
   ports:
   - port: {{ .Values.exporter.ports.containerPort }}
     targetPort: {{ .Values.exporter.ports.containerPort }}
     name: exporter-port
   selector:
     app: cic-k8s-ingress-controller

---

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
 name: citrix-adc-servicemonitor
 labels:
   servicemonitor: citrix-adc
spec:
 endpoints:
 - interval: 30s
   port: exporter-port
 selector:
   matchLabels:
     service-type: citrix-adc-monitor
 namespaceSelector:
   matchNames:
   - monitoring
   - default
   - {{ .Release.Namespace }}

{{- end }}
{{- end }}

---

{{- if .Values.cpxWithCIC }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cpx-ingress
spec:
  selector:
    matchLabels:
      app: cpx-ingress
  replicas: 1
  template:
    metadata:
      name: cpx-ingress
      labels:
        app: cpx-ingress
      annotations:
    spec:
      serviceAccountName: cpx-ingress-k8s-role
      containers:
        - name: cpx-ingress
          image: "{{ .Values.cpx.image }}"
          imagePullPolicy: {{ .Values.cpx.pullPolicy }}
          securityContext:
             privileged: true
          env:
          - name: "EULA"
            value: "{{ .Values.license.accept }}"
          - name: "KUBERNETES_TASK_ID"
            value: ""
{{- if .Values.lsIP }}
          - name: "LS_IP"
            value: {{ .Values.lsIP }}
{{- end }}
{{- if .Values.lsPort }}
          - name: "LS_PORT"
            value: {{ .Values.lsPort }}
{{- end }}
{{- if .Values.platform }}
          - name: "PLATFORM"
            value: {{ .Values.platform }}
{{- end }}
          volumeMounts:
            - mountPath: /cpx/conf/
              name: cpx-volume1
            - mountPath: /cpx/crash/
              name: cpx-volume2
        # Add cic as a sidecar
        - name: cic
          image: "{{ .Values.cic.image }}"
          imagePullPolicy: {{ .Values.cic.pullPolicy }}
          env:
          - name: "EULA"
            value: "{{ .Values.license.accept }}"
          - name: "NS_IP"
            value: "127.0.0.1"
          - name: "NS_PROTOCOL"
            value: "HTTP"
          - name: "NS_PORT"
            value: "80"
          - name: "NS_APPS_NAME_PREFIX"
            value: {{ .Values.nsNamespace | default "k8s"}}
          - name: "NS_DEPLOYMENT_MODE"
            value: "SIDECAR"
          - name: "NS_ENABLE_MONITORING"
            value: "YES"
          - name: POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
{{- if .Values.kubernetesURL }}
          - name: "kubernetes_url"
            value: "{{ .Values.kubernetesURL }}"
{{- end }}
          args:
{{- if .Values.ingressClass }}
            - --ingress-class
{{- range .Values.ingressClass}}
              {{.}}
{{- end }}
{{- end }}
            - --default-ssl-certificate
              {{ .Values.defaultSSLCert | default "{{ .Release.Namespace }}/default-cert" }}
{{- if .Values.exporter.required }}
        - name: exporter
          image: "{{ .Values.exporter.image }}"
          args:
            - "--target-nsip=127.0.0.1"
            - "--port={{ .Values.exporter.ports.containerPort }}"
          imagePullPolicy: {{ .Values.exporter.pullPolicy }}
{{- end }}
      volumes:
        - name: cpx-volume1
          emptyDir: {}
        - name: cpx-volume2
          emptyDir: {}
---

apiVersion: v1
kind: Service
metadata:
  name: cpx-service
  labels:
    app: cpx-service
    service-type: citrix-adc-monitor
spec:
  type: NodePort
  ports:
  - port: 80
    protocol: TCP
    name: http
  - port: 443
    protocol: TCP
    name: https
{{- if .Values.exporter.required }}
  - port: {{ .Values.exporter.ports.containerPort }}
    targetPort: {{ .Values.exporter.ports.containerPort }}
    name: exporter-port
{{- end }}
  selector:
    app: cpx-ingress

---

{{- if .Values.exporter.required }}

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
 name: citrix-adc-servicemonitor
 labels:
   servicemonitor: citrix-adc
spec:
 endpoints:
 - interval: 30s
   port: exporter-port
 selector:
   matchLabels:
     service-type: citrix-adc-monitor
 namespaceSelector:
   matchNames:
   - monitoring
   - default
   - {{ .Release.Namespace }}

{{- end }}
{{- end }}

